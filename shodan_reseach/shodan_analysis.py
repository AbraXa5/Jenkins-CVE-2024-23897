import os
import re

from dotenv import load_dotenv
from shodan import APIError as ShodanAPIError
from shodan import Shodan


# dotenv_path = join(dirname(__file__), '.env')
load_dotenv()
API_KEY = os.getenv("SHODAN_API_KEY")


def is_vulnerable(version_num):

    vulnerable_versions = {
        "2.441": None,  # Vulnerable if equal or below
        "2.426.2": None,  # Vulnerable if equal or below
    }

    if not re.match(r"\d+\.\d+\.\d+$", version_num):
        return False

    for vulnerable_version in vulnerable_versions:
        if version_num <= vulnerable_version:
            return True

    return False


try:
    api = Shodan(API_KEY.strip())

    query = "http.favicon.hash:81586312 200 country:US"
    print(f"[i] Using query: {query}")

    result = api.search(query, limit=100)

    global vulnerable, notVulnerable, count

    vulnerable, notVulnerable, count = 0, 0, 0

    total_results = result["total"]
    print(f"[i] Total Jenkins instances found: {total_results}")

    # result['total']
    # print(json.dumps(result["matches"], indent=4))

    while True:
        matches = result["matches"]
        for item in matches:
            count += 1
            if "data" in item:
                http_data = item["data"]
                x_jenkins_header = None

                # for line in http_data.splitlines():
                #     if line.startswith("X-Jenkins:"):
                #         x_jenkins_header = line.split(":", 1)[1].strip()
                #         break

                x_jenkins_header = next(
                    (
                        line.split(":", 1)[1].strip()
                        for line in http_data.splitlines()
                        if line.startswith("X-Jenkins:")
                    ),
                    None,
                )

                # print(f"X-Jenkins header: {x_jenkins_header or 'Not found'}")
                if x_jenkins_header and is_vulnerable(x_jenkins_header):
                    vulnerable += 1
                    print(
                        f"\r[+] Vulnerable instances found: {vulnerable} | Current count: {count}",
                        end="",
                        flush=True,
                    )
                else:
                    notVulnerable += 1

        if count >= total_results and len(matches) < 100:
            break

        # Fetch the next page of results
        result = api.search(query, limit=100, offset=count)

        # Fix for infinite loop in case of last page
        if len(result["matches"]) == 0:
            break

    print("\n\n[*] Querying complete!")

    # print(count)
    print(f"\n[+] Total vulnerable instances: {vulnerable}")
    print(
        f"[+] {notVulnerable} instances not vulnerable or unable to determine their version"
    )

except ShodanAPIError as e:
    print(f"[X] Shodan error: {e}")

except Exception as e:
    print(f"[X] Exception: {e}")
